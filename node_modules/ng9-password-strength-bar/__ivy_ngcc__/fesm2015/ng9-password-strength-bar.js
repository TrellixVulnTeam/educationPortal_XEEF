import { __decorate } from 'tslib';
import { EventEmitter, Input, Output, Component, NgModule } from '@angular/core';

import * as ɵngcc0 from '@angular/core';
var Ng9PasswordStrengthBarComponent_1;
let Ng9PasswordStrengthBarComponent = Ng9PasswordStrengthBarComponent_1 = class Ng9PasswordStrengthBarComponent {
    constructor() {
        this.onStrengthChanged = new EventEmitter();
        this.defaultColors = ['#F00', '#F90', '#FF0', '#9F0', '#0F0'];
        this.defaultThresholds = [90, 70, 40, 20];
        this.defaultBaseColor = '#DDD';
        this.colors = this.defaultColors;
        this.thresholds = this.defaultThresholds;
    }
    static measureStrength(pass) {
        let score = 0;
        // award every unique letter until 5 repetitions
        const letters = {};
        for (let i = 0; i < pass.length; i++) {
            letters[pass[i]] = (letters[pass[i]] || 0) + 1;
            score += 5.0 / letters[pass[i]];
        }
        // bonus points for mixing it up
        const variations = {
            digits: /\d/.test(pass),
            lower: /[a-z]/.test(pass),
            upper: /[A-Z]/.test(pass),
            nonWords: /\W/.test(pass),
        };
        let variationCount = 0;
        for (let check in variations) {
            variationCount += (variations[check]) ? 1 : 0;
        }
        score += (variationCount - 1) * 10;
        return Math.trunc(score);
    }
    checkBarColors() {
        // Accept custom colors if input is valid, otherwise the default colors will be used
        if (this.barColors && this.barColors.length === 5) {
            this.colors = this.barColors.slice();
        }
        else {
            this.colors = this.defaultColors;
        }
        this.strengths = this.strengthLabels && this.strengthLabels.length === 5 ? this.strengthLabels.slice() : null;
        this.setStrengthLabel(0);
        if (!/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(this.baseColor)) {
            this.baseColor = this.defaultBaseColor;
        }
    }
    checkThresholds() {
        if (this.customThresholds && this.customThresholds.length === 4) {
            this.thresholds = this.customThresholds.slice();
        }
        else {
            this.thresholds = this.defaultThresholds;
        }
    }
    getColor(score) {
        let idx = 0;
        if (score > this.thresholds[0]) {
            idx = 4;
        }
        else if (score > this.thresholds[1]) {
            idx = 3;
        }
        else if (score >= this.thresholds[2]) {
            idx = 2;
        }
        else if (score >= this.thresholds[3]) {
            idx = 1;
        }
        return {
            idx: idx + 1,
            col: this.colors[idx]
        };
    }
    getStrengthIndexAndColor(password) {
        return this.getColor(Ng9PasswordStrengthBarComponent_1.measureStrength(password));
    }
    ngOnChanges(changes) {
        if (!changes['passwordToCheck']) {
            return;
        }
        const password = changes['passwordToCheck'].currentValue;
        this.checkBarColors();
        this.checkThresholds();
        this.setBarColors(5, this.baseColor);
        let strength = 0;
        if (password) {
            const c = this.getStrengthIndexAndColor(password);
            strength = c.idx - 1;
            this.setStrengthLabel(strength);
            this.setBarColors(c.idx, c.col);
        }
        this.onStrengthChanged.emit(strength);
    }
    setBarColors(count, col) {
        for (let _n = 0; _n < count; _n++) {
            this['bar' + _n] = col;
        }
    }
    setStrengthLabel(index) {
        if (this.strengths) {
            this.strengthLabel = this.strengths[index];
        }
    }
};
Ng9PasswordStrengthBarComponent.ɵfac = function Ng9PasswordStrengthBarComponent_Factory(t) { return new (t || Ng9PasswordStrengthBarComponent)(); };
Ng9PasswordStrengthBarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: Ng9PasswordStrengthBarComponent, selectors: [["ng9-password-strength-bar"]], inputs: { baseColor: "baseColor", passwordToCheck: "passwordToCheck", barLabel: "barLabel", barColors: "barColors", strengthLabels: "strengthLabels", customThresholds: "customThresholds" }, outputs: { onStrengthChanged: "onStrengthChanged" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 12, vars: 13, consts: [["id", "strength"], ["strength", ""], ["id", "strengthBar", 1, "strengthBar"], ["id", "bar0", 1, "point"], [1, "point"], [1, "pre", 3, "hidden"]], template: function Ng9PasswordStrengthBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "small");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "ul", 2);
        ɵngcc0.ɵɵelement(5, "li", 3);
        ɵngcc0.ɵɵelement(6, "li", 4);
        ɵngcc0.ɵɵelement(7, "li", 4);
        ɵngcc0.ɵɵelement(8, "li", 4);
        ɵngcc0.ɵɵelement(9, "li", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "small", 5);
        ɵngcc0.ɵɵtext(11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.barLabel);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("background-color", ctx.bar0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("background-color", ctx.bar1);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("background-color", ctx.bar2);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("background-color", ctx.bar3);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("background-color", ctx.bar4);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hidden", !ctx.strengths);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.strengthLabel, "");
    } }, styles: [".strengthBar[_ngcontent-%COMP%] {\n      display: inline;\n      list-style: none;\n      margin: 0 0 0 15px;\n      padding: 0;\n      vertical-align: 2px;\n    }\n\n    .strengthBar[_ngcontent-%COMP%]   .point[_ngcontent-%COMP%] {\n      background: #DDD;\n      border-radius: 2px;\n      display: inline-block;\n      height: 5px;\n      margin-right: 1px;\n      width: 20px;\n    }\n\n    .strengthBar[_ngcontent-%COMP%]   .point[_ngcontent-%COMP%]:last-child {\n      margin: 0;\n    }\n    .pre[_ngcontent-%COMP%] {\n      white-space: pre;\n    }"] });
__decorate([
    Input()
], Ng9PasswordStrengthBarComponent.prototype, "passwordToCheck", void 0);
__decorate([
    Input()
], Ng9PasswordStrengthBarComponent.prototype, "barLabel", void 0);
__decorate([
    Input()
], Ng9PasswordStrengthBarComponent.prototype, "barColors", void 0);
__decorate([
    Input()
], Ng9PasswordStrengthBarComponent.prototype, "baseColor", void 0);
__decorate([
    Input()
], Ng9PasswordStrengthBarComponent.prototype, "strengthLabels", void 0);
__decorate([
    Input()
], Ng9PasswordStrengthBarComponent.prototype, "customThresholds", void 0);
__decorate([
    Output()
], Ng9PasswordStrengthBarComponent.prototype, "onStrengthChanged", void 0);

let Ng9PasswordStrengthBarModule = class Ng9PasswordStrengthBarModule {
};
Ng9PasswordStrengthBarModule.ɵfac = function Ng9PasswordStrengthBarModule_Factory(t) { return new (t || Ng9PasswordStrengthBarModule)(); };
Ng9PasswordStrengthBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: Ng9PasswordStrengthBarModule });
Ng9PasswordStrengthBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng9PasswordStrengthBarComponent, [{
        type: Component,
        args: [{
                selector: 'ng9-password-strength-bar',
                template: `
    <div id="strength" #strength>
      <small>{{barLabel}}</small>
      <ul id="strengthBar" class="strengthBar">
        <li id="bar0" class="point" [style.background-color]="bar0"></li>
        <li class="point" [style.background-color]="bar1"></li>
        <li class="point" [style.background-color]="bar2"></li>
        <li class="point" [style.background-color]="bar3"></li>
        <li class="point" [style.background-color]="bar4"></li>
      </ul>
      <small [hidden]="!strengths" class="pre">  {{strengthLabel}}</small>
    </div>
  `,
                styles: [`
    .strengthBar {
      display: inline;
      list-style: none;
      margin: 0 0 0 15px;
      padding: 0;
      vertical-align: 2px;
    }

    .strengthBar .point {
      background: #DDD;
      border-radius: 2px;
      display: inline-block;
      height: 5px;
      margin-right: 1px;
      width: 20px;
    }

    .strengthBar .point:last-child {
      margin: 0;
    }
    .pre {
      white-space: pre;
    }
  `]
            }]
    }], function () { return []; }, { onStrengthChanged: [{
            type: Output
        }], baseColor: [{
            type: Input
        }], passwordToCheck: [{
            type: Input
        }], barLabel: [{
            type: Input
        }], barColors: [{
            type: Input
        }], strengthLabels: [{
            type: Input
        }], customThresholds: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng9PasswordStrengthBarModule, [{
        type: NgModule,
        args: [{
                declarations: [Ng9PasswordStrengthBarComponent],
                imports: [],
                exports: [Ng9PasswordStrengthBarComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng9PasswordStrengthBarModule, { declarations: [Ng9PasswordStrengthBarComponent], exports: [Ng9PasswordStrengthBarComponent] }); })();

/*
 * Public API Surface of ng9-password-strength-bar
 */

/**
 * Generated bundle index. Do not edit.
 */

export { Ng9PasswordStrengthBarComponent, Ng9PasswordStrengthBarModule };

//# sourceMappingURL=ng9-password-strength-bar.js.map